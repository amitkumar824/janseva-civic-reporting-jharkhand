version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: janseva-postgres
    environment:
      POSTGRES_DB: janseva_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: janseva_password_2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - janseva-network
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: janseva-backend
    environment:
      DATABASE_URL: postgresql://postgres:janseva_password_2025@postgres:5432/janseva_db
      JWT_SECRET: janseva_super_secret_jwt_key_2025_development
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-demo}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-demo_key}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET:-demo_secret}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY:-}
      NODE_ENV: development
      PORT: 5000
      FRONTEND_URL: http://localhost:5173
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - janseva-network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: janseva-frontend
    environment:
      VITE_API_URL: http://localhost:5000/api
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - janseva-network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - /app/node_modules

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: janseva-redis
    ports:
      - "6379:6379"
    networks:
      - janseva-network
    restart: unless-stopped
    volumes:
      - redis_data:/data

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: janseva-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - janseva-network
    restart: unless-stopped

networks:
  janseva-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
