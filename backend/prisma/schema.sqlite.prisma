// This is your Prisma schema file for SQLite development
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("CITIZEN") // UserRole enum as string
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reportedIssues Issue[] @relation("Reporter")
  assignedIssues Issue[] @relation("Assignee")
  comments      Comment[]
  notifications Notification[]

  @@map("users")
}

model Issue {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // IssueCategory enum as string
  status      String   @default("SUBMITTED") // IssueStatus enum as string
  priority    String   @default("MEDIUM") // Priority enum as string
  location    String
  coordinates String? // JSON string for SQLite
  images      String  // JSON string for SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reporterId String
  reporter   User   @relation("Reporter", fields: [reporterId], references: [id])
  assigneeId String?
  assignee   User?  @relation("Assignee", fields: [assigneeId], references: [id])
  department String?
  comments   Comment[]
  updates    IssueUpdate[]

  @@map("issues")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  issueId String
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  userId  String
  user    User  @relation(fields: [userId], references: [id])

  @@map("comments")
}

model IssueUpdate {
  id          String   @id @default(cuid())
  status      String   // IssueStatus enum as string
  message     String
  createdAt   DateTime @default(now())

  // Relations
  issueId String
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("issue_updates")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // NotificationType enum as string
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("notifications")
}
